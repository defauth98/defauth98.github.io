{"version":3,"sources":["components/MovieCard.js","components/Loading.js","components/MovieForm.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","id","title","subtitle","storyline","imagePath","data-testid","src","alt","to","React","Component","Loading","MovieForm","state","handleSubmit","bind","onSubmit","field","newValue","setState","htmlFor","placeholder","type","className","value","onChange","event","updateMovie","target","genre","rating","step","min","max","Number","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","MovieList","getMovies","a","key","renderMovies","MovieDetails","loading","movieAPI","match","params","handleDelete","NewMovie","shouldRedirect","EditMovie","NotFound","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.293db1ce.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport '../styles/components/movieCard.css';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { id, title, subtitle, storyline, imagePath } = movie;\n\n    return (\n      <div data-testid=\"movie-card\" id=\"movie-card\">\n        <img src={ imagePath } alt={ title } />\n        <h1>{ title }</h1>\n        <h2>{ subtitle }</h2>\n        <p>{ storyline }</p>\n        <Link to={ `/movies/${id}` }>VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\n\nimport '../styles/components/loading.css';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div id=\"loading\">Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../styles/components/movieForm.css';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          Título\n\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo\n\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          Imagem\n\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          Sinopse\n\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          Avaliação\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', Number(event.target.value)) }\n          />\n\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div id=\"button-container\">\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    genre: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\n\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport { Loading } from '../components';\n\nimport * as movieAPI from '../services/movieAPI';\n\nimport '../styles/pages/movieList.css';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.getMovies = this.getMovies.bind(this);\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  async getMovies() {\n    const response = await movieAPI.getMovies();\n\n    this.setState({ movies: response });\n  }\n\n  renderMovies(movies) {\n    return (\n      <div id=\"movies\">\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n      </div>\n    );\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div data-testid=\"movie-list\" id=\"movie-list\">\n        <h1 id=\"title\">My Movie Library</h1>\n\n        <Link to=\"/movies/new\" id=\"add-button\">ADICIONAR CARTÃO</Link>\n\n        { movies.length > 1 ? this.renderMovies(movies) : <Loading /> }\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'react-router-dom';\n\nimport * as movieAPI from '../services/movieAPI';\n\nimport { Loading } from '../components';\n\nimport '../styles/pages/movieDetail.css';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getMovie = this.getMovie.bind(this);\n\n    this.state = {\n      movie: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.getMovie();\n  }\n\n  async handleDelete(id) {\n    await movieAPI.deleteMovie(id);\n  }\n\n  async getMovie() {\n    const { match } = this.props;\n    const { params } = match;\n    const movie = await movieAPI.getMovie(params.id);\n\n    this.setState({ movie, loading: false });\n  }\n\n  render() {\n    const { movie, loading } = this.state;\n\n    if (loading) return <Loading />;\n\n    const { id, title, storyline, imagePath, genre, rating, subtitle } = movie;\n\n    return (\n      <div data-testid=\"movie-details\" id=\"movie-container\">\n        <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n        <h1>{`Title: ${title}`}</h1>\n        <p>{ `Subtitle: ${subtitle}` }</p>\n        <p>{ `Storyline: ${storyline}` }</p>\n        <p>{ `Genre: ${genre}` }</p>\n        <p>{ `Rating: ${rating}` }</p>\n\n        <div>\n          <Link to=\"/\">VOLTAR</Link>\n          <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n          <Link to=\"/\" onClick={ () => this.handleDelete(id) }>DELETAR</Link>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    await movieAPI.createMovie(newMovie);\n\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n        <h1>New movie</h1>\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router';\n\nimport PropTypes from 'prop-types';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nimport '../styles/pages/editMovie.css';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie: '',\n      shouldRedirect: false,\n      status: 'loading',\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getMovie = this.getMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovie();\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n\n    this.setState({ shouldRedirect: true });\n  }\n\n  async getMovie() {\n    const { match } = this.props;\n    const { params } = match;\n\n    const movie = await movieAPI.getMovie(params.id);\n\n    this.setState({ movie, status: '' });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\" id=\"edit-movie-container\">\n        <h1>Edit movie</h1>\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired }),\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nimport './styles/global.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route exact path=\"/movies/new\" component={ NewMovie } />\n        <Route\n          exact\n          path=\"/movies/:id\"\n          render={ (props) => <MovieDetails { ...props } /> }\n        />\n        <Route\n          exact\n          path=\"/movies/:id/edit\"\n          render={ (props) => <EditMovie { ...props } /> }\n        />\n        <Route component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}